TestCase subclass: #CallTests	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-BillingTests'!!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test08isLocalReturnsFalseWhenCallIsNational|user1 user2 location1 location2 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'La Plata' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isLocal.self  deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test07isLocalReturnsTrue|user1 user2 location1 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isLocal.self assert: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:43'!test1callingOnInvalidDayReturnsError|user1 user2 location1 country1 call telephoneCompany action|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 80000.action := [call := user1 callUser: user2 atHour: 4 onDay: 'Christmas' forDuration: 4].self should: action raise: NotValidDayError.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:40'!test15makingACallWithNegativeDurationReturnsError|user1 user2 location1 country1 call telephoneCompany action|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 80000.action := [call := user1 callUser: user2 atHour: 4 onDay: 'Saturday' forDuration: -4].self should: action raise: NegativeDurationError.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:55'!test01isInternationalReturnsTrue|user1 user2 location1 location2 country1 country2 call bool|country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'Santiago' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country2 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isInternational.self assert: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test05isNationalReturnsFalseWhenCallIsInternational|user1 user2 location1 location2 country1  country2 call bool|country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName: 'Chile' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'Santiago' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country2 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isNational.self deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:09'!test11nationalCallCalculatesChargeCorrectly|user1 user2 location1 location2 country1 call expectedTotal telephoneCompany billing total|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'Cordoba' andPrice: 30.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location2 fromCountry: country1 withMonthlyPayment: 80000.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10.expectedTotal := 300. "duration x location price = 10 x 30 = 300"telephoneCompany generateBillingForUser: user1. billing := user1 getBilling.total := billing getNacionalAndInternationalCallsTotalCharge.self assert: total equals: expectedTotal.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test06isNationalReturnsFalseWhenCallIsLocal|user1 user2 location1 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isNational.self deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test04isNationalReturnsTrue|user1 user2 location1 location2 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'La Plata' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isNational.self assert: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:11'!test13localCallCalculatesChargeCorrectlyWeekDay|user1 user2 location1 country1 call expectedTotal telephoneCompany billing total|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 80000.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10.expectedTotal := 1. telephoneCompany generateBillingForUser: user1. billing := user1 getBilling.total := billing getLocalCallsTotalCharge.self assert: total equals: expectedTotal.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:58'!test02isInternationalReturnsFalseWhenCallIsLocal|user1 user2 location1 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isInternational.self deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:00'!test09isLocalReturnsFalseWhenCallIsInternational|user1 user2 location1 location2 country1 country2 call bool|country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'Santiago' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country2 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isLocal.self deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:10'!test12localCallCalculatesChargeCorrectlyPeakHourWeekDay|user1 user2 location1 country1 call expectedTotal telephoneCompany billing total|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 80000.call := user1 callUser: user2 atHour: 8 onDay: 'Friday' forDuration: 10.expectedTotal := 2. telephoneCompany generateBillingForUser: user1. billing := user1 getBilling.total := billing getLocalCallsTotalCharge.self assert: total equals: expectedTotal.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:06'!test10internatinoalCallCalculatesChargeCorrectly|user1 user2 location1 location2 country1 country2 call expectedTotal telephoneCompany billing total|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'Santiago' andPrice: 300.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location2 fromCountry: country2 withMonthlyPayment: 80000.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10.expectedTotal := 8000.telephoneCompany generateBillingForUser: user1. billing := user1 getBilling.total := billing getNacionalAndInternationalCallsTotalCharge.self assert: total equals: expectedTotal.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 15:59'!test03isInternationalReturnsFalseWhenCallIsNational|user1 user2 location1 location2 country1 call bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName: 'La Plata' andPrice: 300.user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country1 withMonthlyPayment: 3400.call := user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"bool := call isInternational.self  deny: bool.! !!CallTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:11'!test14localCallCalculatesChargeCorrectlyWeekend|user1 user2 location1 country1 call expectedTotal telephoneCompany billing total|telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 80000.call := user1 callUser: user2 atHour: 4 onDay: 'Saturday' forDuration: 10.expectedTotal := 1. telephoneCompany generateBillingForUser: user1. billing := user1 getBilling.total := billing getLocalCallsTotalCharge.self assert: total equals: expectedTotal.! !TestCase subclass: #CountryTests	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-BillingTests'!!CountryTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:49'!test02CountryCalculatesTotalCorrectlyWithDecimalDuration|newCountry duration total|newCountry := Country withName: 'Argentina' andPrice: 300.duration := 4.8.total := newCountry calculateCountryTotalWith: duration.self assert: total equals: 1440.! !!CountryTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:49'!test01CountryCalculatesTotalCorrectly|newCountry duration total|newCountry := Country withName: 'Argentina' andPrice: 300.duration := 4.total := newCountry calculateCountryTotalWith: duration.self assert: total equals: 1200.! !TestCase subclass: #LocationTests	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-BillingTests'!!LocationTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:47'!test02LocationCalculatesTotalCorrectlyWithDecimalDuration|newLocation duration total|newLocation := Location withName: 'CABA' andPrice: 50.duration := 4.5.total := newLocation calculateLocationTotalWith: duration.self assert: total equals: 225.! !!LocationTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:46'!test01LocationCalculatesTotalCorrectly|newLocation duration total|newLocation := Location withName: 'CABA' andPrice: 50.duration := 4.total := newLocation calculateLocationTotalWith: duration.self assert: total equals: 200.! !TestCase subclass: #TestGeneralUsage	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-BillingTests'!!TestGeneralUsage methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:33'!test03generalUsage|user1 user2 user3 user4 location1 location2 location3 location4 country1 country2 country3 country4 billing1 telephoneCompany |telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.country3 := Country withName: 'United States' andPrice: 100.country4 := Country withName: 'Australia' andPrice: 300.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName:'Washington' andPrice: 40.location3 := Location withName: 'La Plata' andPrice: 45.location4 := Location withName: 'Santiago' andPrice: 300.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location3 fromCountry: country1 withMonthlyPayment: 80000.user3 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 10000.user4 := telephoneCompany registerNewUserFromLocation: location4 fromCountry: country3 withMonthlyPayment: 10000.user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"user1 callUser: user3 atHour: 4 onDay: 'Saturday' forDuration: 10. "0.1x10 = 1"user1 callUser: user3 atHour: 10 onDay: 'Friday' forDuration: 10. "0.2x10 = 2"user1 callUser: user4 atHour: 10 onDay: 'Friday' forDuration: 10. "1000"telephoneCompany generateBillingForUser: user1. billing1 := user1 getBilling.self assert: billing1 getNacionalAndInternationalCallsTotalCharge equals: 1450.! !!TestGeneralUsage methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:23'!test04generalUsageGenerateBillingForMultipleUsers|user1 user2 user3 user4 location1 location2 location3 location4 country1 country2 country3 country4 billing1 billing2 telephoneCompany |telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.country3 := Country withName: 'United States' andPrice: 100.country4 := Country withName: 'Australia' andPrice: 300.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName:'Washington' andPrice: 40.location3 := Location withName: 'La Plata' andPrice: 45.location4 := Location withName: 'Santiago' andPrice: 300.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location3 fromCountry: country1 withMonthlyPayment: 80000.user3 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 10000.user4 := telephoneCompany registerNewUserFromLocation: location4 fromCountry: country3 withMonthlyPayment: 10000.user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"user1 callUser: user3 atHour: 4 onDay: 'Saturday' forDuration: 10. "0.1x10 = 1"user1 callUser: user3 atHour: 10 onDay: 'Friday' forDuration: 10. "0.2x10 = 2"user2 callUser: user3 atHour: 10 onDay: 'Friday' forDuration: 10. "500"user2 callUser: user4 atHour: 10 onDay: 'Friday' forDuration: 10. "1000"telephoneCompany generateBillingForAllUsers.billing1 := user1 getBilling.billing2 := user2 getBilling.self assert: billing1 getNacionalAndInternationalCallsTotalCharge equals: 450.self assert: billing1 getLocalCallsTotalCharge equals:3.self assert: billing2 getNacionalAndInternationalCallsTotalCharge equals: 1500.self assert: billing2 getLocalCallsTotalCharge equals:0.! !!TestGeneralUsage methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:38'!test05registratingAUserWithNegativePaymentReturnsError|user1 location1  country1 action telephoneCompany|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.telephoneCompany := TelephoneCompany new.action := [user1 :=  telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: -400].self should: action raise: NegativePaymentError.! !!TestGeneralUsage methodsFor: 'tests'!test01generalUsage|user1 user2 user3 user4 location1 location2 location3 location4 country1 country2 country3 country4 billing1 telephoneCompany |telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.country3 := Country withName: 'United States' andPrice: 100.country4 := Country withName: 'Australia' andPrice: 300.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName:'Washington' andPrice: 40.location3 := Location withName: 'La Plata' andPrice: 45.location4 := Location withName: 'Santiago' andPrice: 300.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location3 fromCountry: country1 withMonthlyPayment: 80000.user3 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 10000.user4 := telephoneCompany registerNewUserFromLocation: location4 fromCountry: country3 withMonthlyPayment: 10000.user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"user1 callUser: user3 atHour: 4 onDay: 'Saturday' forDuration: 10. "0.1x10 = 1"user1 callUser: user3 atHour: 10 onDay: 'Friday' forDuration: 10. "0.2x10 = 2"user1 callUser: user4 atHour: 10 onDay: 'Friday' forDuration: 10. "1000"telephoneCompany generateBillingForUser: user1. billing1 := user1 getBilling.self assert: billing1 getMonthlyPayment equals: 50000.! !!TestGeneralUsage methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:33'!test02generalUsage|user1 user2 user3 user4 location1 location2 location3 location4 country1 country2 country3 country4 billing1 telephoneCompany |telephoneCompany := TelephoneCompany new.country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName:'Chile' andPrice: 800.country3 := Country withName: 'United States' andPrice: 100.country4 := Country withName: 'Australia' andPrice: 300.location1 := Location withName: 'Buenos Aires' andPrice: 50.location2 := Location withName:'Washington' andPrice: 40.location3 := Location withName: 'La Plata' andPrice: 45.location4 := Location withName: 'Santiago' andPrice: 300.user1 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 50000.user2 := telephoneCompany registerNewUserFromLocation: location3 fromCountry: country1 withMonthlyPayment: 80000.user3 := telephoneCompany registerNewUserFromLocation: location1 fromCountry: country1 withMonthlyPayment: 10000.user4 := telephoneCompany registerNewUserFromLocation: location4 fromCountry: country3 withMonthlyPayment: 10000.user1 callUser: user2 atHour: 4 onDay: 'Friday' forDuration: 10. "450"user1 callUser: user3 atHour: 4 onDay: 'Saturday' forDuration: 10. "0.1x10 = 1"user1 callUser: user3 atHour: 10 onDay: 'Friday' forDuration: 10. "0.2x10 = 2"user1 callUser: user4 atHour: 10 onDay: 'Friday' forDuration: 10. "1000"telephoneCompany generateBillingForUser: user1. billing1 := user1 getBilling.self assert: billing1 getLocalCallsTotalCharge equals: 3.0.! !TestCase subclass: #UserTests	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-BillingTests'!!UserTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:42'!test03isFromSameLocationReturnsTrue|user1 user2 country1 location1 bool |country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'CABA' andPrice: 30. user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 3400.bool := user1 isFromSameLocationAs: user2.self assert: bool equals: true.! !!UserTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 16:36'!test05creatingUserWithNegativePaymentReturnsError|user1 location1  country1 action|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'Buenos Aires' andPrice: 50.action := [user1 :=  User fromLocation: location1 fromCountry: country1 withMonthlyPayment: -300].self should: action raise: NegativePaymentError.! !!UserTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:40'!test01isFromSameCountryReturnsTrue|user1 user2 country1 location1 bool|country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'CABA' andPrice: 30. user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 3400.bool := user1 isFromSameCountryAs: user2.self assert: bool equals: true.! !!UserTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:42'!test04isFromSameLocationReturnsFalse|user1 user2 country1 location1 bool location2 |country1 := Country withName: 'Argentina' andPrice: 500.location1 := Location withName: 'CABA' andPrice: 30. location2 := Location withName: 'La Plata' andPrice: 23. user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location2 fromCountry: country1 withMonthlyPayment: 3400.bool := user1 isFromSameLocationAs: user2.self assert: bool equals: false.! !!UserTests methodsFor: 'tests' stamp: 'Anonymous 5/4/2025 14:40'!test02isFromSameCountryReturnsFalse|user1 user2 country1 location1 bool country2|country1 := Country withName: 'Argentina' andPrice: 500.country2 := Country withName: 'Australia' andPrice: 500.location1 := Location withName: 'CABA' andPrice: 30. user1 := User fromLocation: location1 fromCountry: country1 withMonthlyPayment: 6000.user2:= User fromLocation: location1 fromCountry: country2 withMonthlyPayment: 3400.bool := user1 isFromSameCountryAs: user2.self assert: bool equals: false.! !Object subclass: #Billing	instanceVariableNames: 'payment localCallsTotalCharge nacionalAndInternationalCallsTotalCharge user calls'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 01:15'!calculateBilling: aMonthlyPaymentlocalCallsTotalCharge := self calculateLocalCallsChargeInTotal.nacionalAndInternationalCallsTotalCharge := self calculateNationalAndInternationalChargeInTotal.payment := aMonthlyPayment.! !!Billing methodsFor: 'as yet unclassified'!withUser: aUseruser := aUser. ! !!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 00:57'!getMonthlyPayment^payment.! !!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 00:58'!getNacionalAndInternationalCallsTotalCharge^nacionalAndInternationalCallsTotalCharge.! !!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:07'!calculateLocalCallsChargeInTotal|totalLocal localCalls|localCalls := calls select: [:call | call isLocal].totalLocal := localCalls inject: 0 into: [:a :call | a + (call calculateCharge)].^totalLocal.! !!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 00:58'!getLocalCallsTotalCharge ^localCallsTotalCharge.! !!Billing methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:07'!calculateNationalAndInternationalChargeInTotal|totalNational totalInternational nationalCalls  internationalCalls total|nationalCalls := calls select: [:call | call isNational].totalNational := nationalCalls inject: 0 into: [:b :call | b + call calculateCharge].internationalCalls := calls select: [:call | call isInternational].totalInternational := internationalCalls inject: 0 into: [:c :call | c + call calculateCharge].total := totalNational + totalInternational.^total.! !!Billing methodsFor: 'initialization' stamp: 'Anonymous 5/4/2025 01:13'!initialize calls := OrderedCollection new. localCallsTotalCharge := 0.nacionalAndInternationalCallsTotalCharge := 0.! !!Billing methodsFor: 'adding' stamp: 'Anonymous 5/4/2025 00:47'!addCall:aCallcalls add: aCall.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Billing class	instanceVariableNames: ''!!Billing class methodsFor: 'as yet unclassified'!withUser: aUser |newBilling|newBilling := self new.newBilling withUser: aUser.^newBilling. ! !Object subclass: #Call	instanceVariableNames: 'hour dayOfTheWeek durationInMinutes destinationUser originUser'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!Call methodsFor: 'accessing' stamp: 'Anonymous 5/4/2025 16:32'!atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: caller(self isValid: aDay)ifFalse:[ NotValidDayError signal ].hour := anHour.dayOfTheWeek := aDay.durationInMinutes := aDuration.destinationUser := aUser.originUser:= caller.! !!Call methodsFor: 'testing' stamp: 'Anonymous 5/4/2025 16:31'!isValid: aDay^ (#('Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' 'Sunday') includes: aDay).! !!Call methodsFor: 'testing' stamp: 'Anonymous 5/4/2025 13:29'!isLocal^(destinationUser isFromSameLocationAs: originUser).! !!Call methodsFor: 'testing' stamp: 'Anonymous 5/4/2025 13:30'!isInternational^((destinationUser isFromSameCountryAs: originUser) not).! !!Call methodsFor: 'testing' stamp: 'Anonymous 5/4/2025 13:29'!isNational^(((self isLocal) or:(self isInternational)) not) .! !!Call methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:02'!calculateChargeself subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Call class	instanceVariableNames: ''!!Call class methodsFor: 'accessing'!atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: caller| call |(aUser isFromSameCountryAs: caller) ifFalse:[ call := International new. call atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: caller. ^call ].(aUser isFromSameLocationAs: caller) ifTrue: [call := Local new. call atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: caller. ^call].call := National new. call atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: caller.^call.! !Object subclass: #Country	instanceVariableNames: 'name countryPrice'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!Country methodsFor: 'as yet unclassified'!calculateCountryTotalWith:aDuration^(aDuration * countryPrice).! !!Country methodsFor: 'as yet unclassified'!withName: aName andPrice: aPricename := aName.countryPrice := aPrice.! !!Country methodsFor: 'as yet unclassified'!getPrice ^countryPrice.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Country class	instanceVariableNames: ''!!Country class methodsFor: 'as yet unclassified'!withName: aName andPrice: aPrice|newCountry|newCountry := self new.newCountry withName: aName andPrice: aPrice.^newCountry.! !Call subclass: #International	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!International methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:05'!calculateCharge|countryOfDestination chargeDependingOnCountry|countryOfDestination := destinationUser getCountry. chargeDependingOnCountry := countryOfDestination calculateCountryTotalWith: durationInMinutes.^chargeDependingOnCountry.! !Call subclass: #Local	instanceVariableNames: 'pricePerMinuteOnWeekDaysPeakHours pricePerMinuteOnWeekDaysOffPeakHour'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!Local methodsFor: 'testing' stamp: 'Anonymous 5/4/2025 14:06'!isWeekDay: aDay^ (#('Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday') includes: aDay).! !!Local methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:05'!calculateCharge((self isWeekDay: dayOfTheWeek) and:(self inPeakHour: hour)) ifTrue:[ ^(durationInMinutes * pricePerMinuteOnWeekDaysPeakHours)].^(durationInMinutes * pricePerMinuteOnWeekDaysOffPeakHour).! !!Local methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:06'!inPeakHour: anHour^[ (hour >= 8) and: (hour <= 20) ].! !!Local methodsFor: 'initialization' stamp: 'Anonymous 5/4/2025 14:06'!initialize pricePerMinuteOnWeekDaysPeakHours := 0.2.pricePerMinuteOnWeekDaysOffPeakHour := 0.1.! !Object subclass: #Location	instanceVariableNames: 'name locationPrice'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!Location methodsFor: 'as yet unclassified'!calculateLocationTotalWith: aDuration^(aDuration * locationPrice).! !!Location methodsFor: 'as yet unclassified'!withName: aName andPrice:aPricename := aName.locationPrice := aPrice.! !!Location methodsFor: 'as yet unclassified'!getPrice^locationPrice.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Location class	instanceVariableNames: ''!!Location class methodsFor: 'as yet unclassified'!withName: aName andPrice: aPrice|newLocation|newLocation := self new.newLocation withName: aName andPrice:aPrice.^newLocation.! !Call subclass: #National	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!National methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 14:05'!calculateCharge|destinationLocation chargeDependingOnLocation|destinationLocation := destinationUser getLocation.chargeDependingOnLocation := destinationLocation calculateLocationTotalWith: durationInMinutes.^chargeDependingOnLocation.! !Error subclass: #NegativeDurationError	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!Error subclass: #NegativePaymentError	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!Error subclass: #NotValidDayError	instanceVariableNames: ''	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!Object subclass: #TelephoneCompany	instanceVariableNames: 'users'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!TelephoneCompany methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 16:28'!registerNewUserFromLocation: aLocation fromCountry: aCountry withMonthlyPayment: aMonthlyPayment|newUser|(aMonthlyPayment <= 0)ifTrue:[NegativePaymentError signal].newUser := User fromLocation: aLocation fromCountry: aCountry withMonthlyPayment: aMonthlyPayment.users add: newUser.^newUser.! !!TelephoneCompany methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 01:04'!generateBillingForUser: aUser|billing|billing := aUser generateBilling. ! !!TelephoneCompany methodsFor: 'as yet unclassified'!generateBillingForAllUsersusers do:[:user| self generateBillingForUser: user].! !!TelephoneCompany methodsFor: 'initialization'!initialize users := OrderedCollection new.! !Object subclass: #User	instanceVariableNames: 'location country billing monthlyPayment'	classVariableNames: ''	package: 'MercapEmmaGiovineBiling-classes'!!User methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 01:00'!getBilling^billing.! !!User methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 16:26'!fromLocation: aLocation fromCountry: aCountry withMonthlyPayment: aMonthlyPayment(aMonthlyPayment <= 0)ifTrue:[NegativePaymentError signal].location:= aLocation.country := aCountry.monthlyPayment := aMonthlyPayment.! !!User methodsFor: 'as yet unclassified'!getLocation^location.! !!User methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/4/2025 16:27'!callUser: aUser atHour: anHour onDay: aDay forDuration: aDuration|newCall|(aDuration < 0 )ifTrue:[NegativeDurationError signal].newCall := Call atHour: anHour onDay: aDay  withDuration: aDuration destinationUser: aUser fromUser: self. billing addCall: newCall.^newCall.! !!User methodsFor: 'as yet unclassified'!getCountry ^country.! !!User methodsFor: 'as yet unclassified'!getMonthlyPayment ^monthlyPayment.! !!User methodsFor: 'as yet unclassified'!generateBillingbilling calculateBilling: monthlyPayment.! !!User methodsFor: 'testing'!isFromSameLocationAs: aUser|locationToCompare|locationToCompare := aUser getLocation.^(locationToCompare = location).! !!User methodsFor: 'testing'!isFromSameCountryAs: aUser|countryToCompare|countryToCompare := aUser getCountry.^(countryToCompare = country).! !!User methodsFor: 'initialization'!initializebilling := Billing withUser: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'as yet unclassified'!fromLocation: aLocation fromCountry: aCountry withMonthlyPayment: aMonthlyPayment|newUser|newUser := self new.newUser fromLocation: aLocation fromCountry: aCountry withMonthlyPayment: aMonthlyPayment.^newUser.! !